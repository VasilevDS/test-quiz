{% extends 'base.html.twig' %}

{% block body %}

<style>
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
    }

    .container {
        max-width: 800px;
        margin: 20px auto;
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    h1 {
        text-align: center;
        margin-bottom: 20px;
    }

    .quiz-name {
        text-align: center;
        font-size: 24px;
        margin-bottom: 20px;
    }

    .question {
        border: 1px solid #ccc;
        border-radius: 5px;
        padding: 10px;
        margin-bottom: 20px;
    }

    .question h3 {
        margin-top: 0;
    }

    .answer {
        margin-bottom: 5px;
    }

    button {
        display: block;
        width: 100%;
        padding: 15px;
        font-size: 18px;
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        margin-top: 20px;
    }

    button:hover {
        background-color: #45a049;
    }
</style>

<body>
<div class="container">
    <div class="quiz-name" id="quizName"></div>
    <div id="quizFormContainer"></div>
</div>

<script>
    const quizId = {{ quizId }};

    // Fetch JSON data from the API endpoint
    fetch('http://localhost:8080/api/quiz/' + quizId)
        .then(response => response.json())
        .then(data => {
            // Construct the HTML form based on the received JSON data
            const quizFormContainer = document.getElementById('quizFormContainer');
            const questions = data.questions;

            const form = document.createElement('form');
            form.setAttribute('id', 'quizForm');

            questions.forEach(question => {
                const fieldset = document.createElement('fieldset');
                fieldset.classList.add('question');
                const legend = document.createElement('legend');
                legend.textContent = question.text;
                fieldset.appendChild(legend);

                question.answers.forEach(answer => {
                    const label = document.createElement('label');
                    label.setAttribute('for', `question_${question.id}_answer_${answer.id}`);
                    const input = document.createElement('input');
                    input.setAttribute('type', 'checkbox');
                    input.setAttribute('name', `question_${question.id}_answers`);
                    input.setAttribute('id', `question_${question.id}_answer_${answer.id}`);
                    input.setAttribute('value', answer.id);
                    if (answer.selected) {
                        input.setAttribute('checked', 'checked');
                    }
                    input.classList.add('answer');
                    label.appendChild(input);
                    label.appendChild(document.createTextNode(answer.text));
                    fieldset.appendChild(label);
                    fieldset.appendChild(document.createElement('br'));
                });

                form.appendChild(fieldset);
            });

            const submitButton = document.createElement('button');
            submitButton.setAttribute('type', 'submit');
            submitButton.textContent = 'Submit';
            form.appendChild(submitButton);

            // Append the form to the container
            quizFormContainer.appendChild(form);

            // Set the quiz name
            const quizNameElement = document.getElementById('quizName');
            quizNameElement.textContent = data.name;

            // Add submit event listener to the form
            form.addEventListener('submit', event => {
                event.preventDefault(); // Prevent default form submission
                const formData = new FormData(form);

                // Convert FormData to JSON object
                const selectedAnswers = questions.map(question => {
                    return {
                        id: question.id,
                        answers: Array.from(formData.getAll(`question_${question.id}_answers`)).map(answerId => {
                            return {
                                id: parseInt(answerId),
                                selected: true // Since it's a checkbox, if it's checked, it's selected
                            };
                        })
                    };
                });

                const jsonData = {
                    id: quizId,
                    questions: selectedAnswers
                };

                // Send selected answers to the API endpoint
                fetch('http://localhost:8080/api/quiz/vote', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(jsonData)
                })
                    .then(response => {
                        if (response.ok) {
                            console.log('Answers submitted successfully.');
                            response.json().then(data => {
                                const encodedData = encodeURIComponent(JSON.stringify(data));
                                window.location.href = `http://localhost:8080/quiz/result/quiz_results.html?data=${encodedData}`;
                            });
                        } else {
                            response.json().then(errorData => {
                                const errorMessages = errorData.errors.map(
                                    error => error.propertyPath + ':' + error.message
                                ).join('\n');
                                alert(`Error: ${errorData.message}\n\n${errorMessages}`);
                            });
                        }
                    })
                    .catch(error => console.error('Error submitting answers:', error));
            });
        })
        .catch(error => console.error('Error fetching quiz data:', error));
</script>

{% endblock %}
